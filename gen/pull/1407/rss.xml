<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-02-09T08:29:41.103679</updated>
  <id>f834843b-b61d-4fd5-93cd-3e8e730467bc</id>

  
    <entry>
      <title>lgamma -- cmath (tgamma): lgamma を使うべき場合について記述</title>
      <link href="https://cpprefjp.github.io/reference/cmath/lgamma.html"/>
      <id>7fdc2d3a8467a827f2dc3d37e448de2949e87576:reference/cmath/lgamma.md</id>
      <updated>2025-02-09T16:31:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/lgamma.md b/reference/cmath/lgamma.md
index 60de4faba..43a1329a0 100644
--- a/reference/cmath/lgamma.md
+++ b/reference/cmath/lgamma.md
@@ -61,6 +61,8 @@ namespace std {
     - `x = +∞` の場合、戻り値は `+∞` となる。
 - C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
+この関数はガンマ関数 ([`tgamma`](tgamma.md)) がオーバーフローするような場合に使う。
+具体例については[ガンマ関数の備考](tgamma.md#remarks-lgamma)を参照のこと。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tgamma -- cmath (tgamma): lgamma を使うべき場合について記述</title>
      <link href="https://cpprefjp.github.io/reference/cmath/tgamma.html"/>
      <id>7fdc2d3a8467a827f2dc3d37e448de2949e87576:reference/cmath/tgamma.md</id>
      <updated>2025-02-09T16:31:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/tgamma.md b/reference/cmath/tgamma.md
index 9b96a0bcb..c3622277a 100644
--- a/reference/cmath/tgamma.md
+++ b/reference/cmath/tgamma.md
@@ -64,6 +64,32 @@ $$ \Gamma (x) = \int_0^\infty t^{x-1} e^{-t} dt $$
 - `gamma` という関数は既にあったが処理系によって定義が違ったため、本当の (true) ガンマ関数 `tgamma` と名付けられた。
 - C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
+### &amp;lt;a id=&amp;#34;remarks-lgamma&amp;#34; href=&amp;#34;#remarks-lgamma&amp;#34;&amp;gt;lgamma との使い分け&amp;lt;/a&amp;gt;
+ガンマ関数は急激に増加し容易にオーバーフローするので、代わりにガンマ関数の結果を自然対数で返す関数 [`lgamma`](lgamma.md) を用いた方が良いことが多くある。
+例えばガンマ関数の比を計算する場合には、 ガンマ関数の対数の差を取ってから指数関数 [`std::exp`](exp.md) を適用するのが懸命である。
+
+$$ \frac{\Gamma(2026)}{\Gamma(2025)} = \exp[\ln\Gamma(2026) - \ln\Gamma(2025)] $$
+
+```cpp example
+#include &amp;lt;cmath&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+int main() {
+  std::cout &amp;lt;&amp;lt; std::tgamma(2026.0) / std::tgamma(2025.0) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::exp(std::lgamma(2026.0) - std::lgamma(2025.0)) &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::tgamma[color ff0000]
+* std::lgamma[color 0000ff][link tgamma.md]
+
+出力例
+```
+-nan
+2025
+```
+
+上の結果では、直接ガンマ関数を計算した場合はオーバーフローによって inf / inf となり最終結果が nan になっているが、`lgamma` を使った場合には正しい値が計算できている。
+ただし、`lgamma` は飽くまでガンマ関数の「絶対値」の対数であることに注意する。
+ガンマ関数の引数が負になる場合はガンマ関数が負になりうるので符号は別に求める必要がある。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tgamma -- cmath (tgamma): 階乗とガンマ関数の関係を式で明記</title>
      <link href="https://cpprefjp.github.io/reference/cmath/tgamma.html"/>
      <id>c3f3807801ea65068d795935d4252cc800c67fee:reference/cmath/tgamma.md</id>
      <updated>2025-02-09T16:19:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/tgamma.md b/reference/cmath/tgamma.md
index 9214b4b45..9b96a0bcb 100644
--- a/reference/cmath/tgamma.md
+++ b/reference/cmath/tgamma.md
@@ -52,7 +52,7 @@ namespace std {
 $$ \Gamma (x) = \int_0^\infty t^{x-1} e^{-t} dt $$
 
 ## 備考
-- ガンマ関数は階乗の一般化である。
+- ガンマ関数は階乗の一般化である。階乗はガンマ関数を用いて $n! = \Gamma(n + 1)$ で計算できる。
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
     - `x = ±0` の場合、戻り値は `±∞` となり、
     [`FE_DIVBYZERO`](../cfenv/fe_divbyzero.md)（ゼロ除算浮動小数点例外）が発生する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lgamma -- cmath (std::{tgamma,lgamma}): 相互リンク</title>
      <link href="https://cpprefjp.github.io/reference/cmath/lgamma.html"/>
      <id>b2066e2bbcef4a3018f2ae0be3db41071166da73:reference/cmath/lgamma.md</id>
      <updated>2025-02-09T16:18:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/lgamma.md b/reference/cmath/lgamma.md
index bcb8dd552..60de4faba 100644
--- a/reference/cmath/lgamma.md
+++ b/reference/cmath/lgamma.md
@@ -35,7 +35,7 @@ namespace std {
 * Integral[italic]
 
 ## 概要
-ガンマ関数の絶対値の自然対数を求める。
+ガンマ関数 $\Gamma(x)$ ([`tgamma`](tgamma.md)) の絶対値の自然対数を求める。
 
 - (1) : `float`に対するオーバーロード
 - (2) : `double`に対するオーバーロード
@@ -107,6 +107,8 @@ lgamma(+∞)  = inf
 
 - GCC 4.6.1 以上
 
+## 関連項目
+- ガンマ関数 [`tgamma`](tgamma.md)
 
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tgamma -- cmath (std::{tgamma,lgamma}): 相互リンク</title>
      <link href="https://cpprefjp.github.io/reference/cmath/tgamma.html"/>
      <id>b2066e2bbcef4a3018f2ae0be3db41071166da73:reference/cmath/tgamma.md</id>
      <updated>2025-02-09T16:18:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/tgamma.md b/reference/cmath/tgamma.md
index 7fff0221b..9214b4b45 100644
--- a/reference/cmath/tgamma.md
+++ b/reference/cmath/tgamma.md
@@ -110,6 +110,8 @@ tgamma(+∞)  = inf
 
 - GCC 4.6.1 以上
 
+## 関連項目
+- ガンマ関数の絶対値の対数 [`lgamma`](lgamma.md)
 
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tgamma -- cmath (std::tgamma): ガンマ関数の定義式を追記</title>
      <link href="https://cpprefjp.github.io/reference/cmath/tgamma.html"/>
      <id>b3e348c7b11088d7ebca3e71818d82eb421eee9b:reference/cmath/tgamma.md</id>
      <updated>2025-02-09T16:12:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/tgamma.md b/reference/cmath/tgamma.md
index 4f3e397eb..7fff0221b 100644
--- a/reference/cmath/tgamma.md
+++ b/reference/cmath/tgamma.md
@@ -47,11 +47,11 @@ namespace std {
 
 
 ## 戻り値
-引数 `x` のガンマ関数を返す。
+引数 `x` のガンマ関数 $\Gamma(x)$ を返す。
 
+$$ \Gamma (x) = \int_0^\infty t^{x-1} e^{-t} dt $$
 
 ## 備考
-- $$ f(x) = \Gamma (x) $$
 - ガンマ関数は階乗の一般化である。
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
     - `x = ±0` の場合、戻り値は `±∞` となり、
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>legendre -- cmath (std::legendre): ルジャンドル多項式の範囲外エラーについて記述</title>
      <link href="https://cpprefjp.github.io/reference/cmath/legendre.html"/>
      <id>41227ca53a09f589115d141f7e963782003d7690:reference/cmath/legendre.md</id>
      <updated>2025-02-09T15:51:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/legendre.md b/reference/cmath/legendre.md
index 5e35b3d88..9c9e54241 100644
--- a/reference/cmath/legendre.md
+++ b/reference/cmath/legendre.md
@@ -103,6 +103,9 @@ legendre(3, 1) = 1
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
 
+### 備考
+- GCC 7, 8 には $x$ として [-1.0, 1.0] の範囲外の値を渡した時に、[`std::domain_error`](/reference/stdexcept.md) を投げるバグがあった (GCC 7.5, 8.2, 8.4 [mark verified])。
+  GCC 9 以降では直っている (GCC 9.3, 10.5, 11.4, 12.3, 13.2, 15.0 [mark verified])。
 
 ## 実装例
 ### 閉形式
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
</feed>